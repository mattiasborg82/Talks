{"$schema":"https://dataexplorer.azure.com/static/d/schema/52/dashboard.json","id":"ba13a827-3bf8-4261-a7c3-1f4ab283417d","eTag":"defd4b7a-9bd8-44dc-9402-ffe3c8ad4006","schema_version":"52","title":"Graph visualization","tiles":[{"id":"099438f6-1bc0-49c8-b04e-75ef3eb014c0","title":"small test","visualType":"plotly","pageId":"f9162934-a085-4aca-afb3-aeaf84a10b45","layout":{"x":0,"y":0,"width":24,"height":21},"hideTitle":true,"queryRef":{"kind":"query","queryId":"c8d69ef5-8ccc-4556-8c1f-550626e1a148"},"visualOptions":{"xColumn":null,"plotly__version":"2","pie__TopNSlices":null}},{"id":"74891227-03c1-45d4-bf62-c665dd061f15","title":"small test","visualType":"plotly","pageId":"aea698cd-0ce9-4fe7-904d-7600382f2e76","layout":{"x":0,"y":0,"width":24,"height":21},"hideTitle":true,"queryRef":{"kind":"query","queryId":"e217e08c-569c-4674-bb5d-dcd2e83418d7"},"visualOptions":{"xColumn":null,"plotly__version":"2","pie__TopNSlices":null}}],"baseQueries":[],"parameters":[{"kind":"duration","id":"bda18110-f7c3-49af-a056-02e8427ae525","displayName":"Time range","description":"","beginVariableName":"_startTime","endVariableName":"_endTime","defaultValue":{"kind":"dynamic","count":1,"unit":"hours"},"showOnPages":{"kind":"all"}},{"kind":"string","id":"146778b9-9ae9-44cb-abd6-c895c5f7ea99","displayName":"Layout","description":"","variableName":"_pLayout","selectionType":"scalar","includeAllOption":false,"defaultValue":{"kind":"value","value":"spring_layout"},"dataSource":{"kind":"static","values":[{"displayText":"Spring","value":"spring_layout"},{"displayText":"Spectral","value":"spectral_layout"},{"displayText":"Kamada Kawai","value":"kamada_kawai_layout"},{"displayText":"Planar","value":"planar_layout"},{"displayText":"Random","value":"random_layout"}]},"showOnPages":{"kind":"all"}}],"dataSources":[{"id":"9cbd33f2-edda-442c-869a-79e99ce84d17","kind":"manual-kusto","scopeId":"kusto","name":"WPNinjas","clusterUri":"https://democlusteruk.westeurope.kusto.windows.net/","database":"UKDEMO"}],"pages":[{"id":"f9162934-a085-4aca-afb3-aeaf84a10b45","name":"ABC"},{"id":"aea698cd-0ce9-4fe7-904d-7600382f2e76","name":"Simple Graph"}],"queries":[{"dataSource":{"kind":"inline","dataSourceId":"9cbd33f2-edda-442c-869a-79e99ce84d17"},"text":"let pythonCodeBlueprint = ```\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport networkx as nx\n\nG = nx.Graph()\n\nfor index, row in df.iterrows():\n    if row[\"tableName\"] == \"N\":\n        G.add_node(row[\"nodeId\"], size = 1, properties = row.where(pd.notnull(row), None).to_dict())\n    elif row[\"tableName\"] == \"E\":\n        G.add_edge(row[\"sourceId\"], row[\"targetId\"], weight = 1, properties = row.where(pd.notnull(row), None).to_dict())\n\npos_ = nx.layout.##layout##(G)\n\nedge_x = [];\nedge_y = [];\nmnode_x, mnode_y, mnode_txt = [], [], []\nfor edge in G.edges():\n    x0, y0 = pos_[edge[0]]\n    x1, y1 = pos_[edge[1]]\n    edge_x.append(x0)\n    edge_x.append(x1)\n    edge_x.append(None)\n    edge_y.append(y0)\n    edge_y.append(y1)\n    edge_y.append(None)\n\n    text = 'source: '+ str(edge[0]) + \" destination: \" + str(edge[1]) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.edges[edge]['properties'].items() if value is not None)\n    mnode_x.extend([(x0 + x1)/2]) # assuming values positive/get midpoint\n    mnode_y.extend([(y0 + y1)/2]) # assumes positive vals/get midpoint\n    mnode_txt.append(text) # hovertext\n\nedge_trace = go.Scatter(\n    x=edge_x, y=edge_y,\n    line=dict(width=0.5, color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\nmnode_trace = go.Scatter(\n    x = mnode_x, y = mnode_y, \n    mode = \"markers\", \n    hoverinfo='text',\n    opacity=0.5,\n    marker=dict(\n        color='LightSkyBlue',\n        size=2,\n        line_width=1))\n\nmnode_trace.text = mnode_txt\n\nnode_x = []\nnode_y = []\nfor node in G.nodes():\n    x, y = pos_[node]\n    node_x.append(x)\n    node_y.append(y)\n\nnode_adjacencies = []\nnode_text = []\nnode_sizes = []\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_sizes.append(10 + len(adjacencies[1])/G.number_of_nodes())\n    node_adjacencies.append(len(adjacencies[1]))\n    text = '# of connections: '+ str(len(adjacencies[1])) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.nodes[adjacencies[0]]['properties'].items() if value is not None)\n    node_text.append(text)\n\nnode_trace = go.Scatter(\n    x=node_x, y=node_y,\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        # colorscale options\n        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |\n        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |\n        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |\n        colorscale='Picnic',\n        reversescale=False,\n        color=[],\n        size=10,\n        colorbar=dict(\n            thickness=15,\n            title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line_width=2))\n\nnode_trace.marker.color = node_adjacencies\nnode_trace.text = node_text\nnode_trace.marker.size = node_sizes\n\nfig = go.Figure(data=[edge_trace, node_trace, mnode_trace],\n             layout=go.Layout(\n                title='<br>Graph visualization of the data',\n                titlefont_size=16,\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"Created used plotly, networkx and the python plugin of Kusto\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\",\n                    x=0.005, y=-0.002 ) ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))\n                )\n\n\nplotly_obj = fig.to_json()\nresult = pd.DataFrame(data = [plotly_obj], columns = ['plotly'])\n```;\nlet pythonCode = replace_string(pythonCodeBlueprint, \"##layout##\", _pLayout);\nlet lastChar = 'z';\nlet abc = range skip from 0 to 25 step 1\n| extend ABC = \"abcdefghijklmnopqrstuvwxyz\"\n| extend ['char'] = substring(ABC, skip, 1);\nlet nodes = abc \n    | project ['char'];\nlet edges = abc \n    | serialize \n    | extend successor = next(['char'])\n    | where isnotempty( successor)\n    | project ['char'], successor;\nlet graph = edges\n| make-graph ['char'] --> successor with nodes on ['char'];\ngraph\n| graph-to-table edges as E with_source_id=sourceId with_target_id=targetId, nodes as N with_node_id=nodeId;\nunion withsource=tableName E, N\n| evaluate python(\n//\ntypeof(plotly:string),               //  Output schema: append a new fx column to original table \npythonCode)","id":"c8d69ef5-8ccc-4556-8c1f-550626e1a148","usedVariables":["_pLayout"]},{"dataSource":{"kind":"inline","dataSourceId":"9cbd33f2-edda-442c-869a-79e99ce84d17"},"text":"let pythonCodeBlueprint = ```\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objects as go\nimport networkx as nx\n\nG = nx.Graph()\n\nfor index, row in df.iterrows():\n    if row[\"tableName\"] == \"N\":\n        G.add_node(row[\"nodeId\"], size = 1, properties = row.where(pd.notnull(row), None).to_dict())\n    elif row[\"tableName\"] == \"E\":\n        G.add_edge(row[\"sourceId\"], row[\"targetId\"], weight = 1, properties = row.where(pd.notnull(row), None).to_dict())\n\npos_ = nx.layout.##layout##(G)\n\nedge_x = [];\nedge_y = [];\nmnode_x, mnode_y, mnode_txt = [], [], []\nfor edge in G.edges():\n    x0, y0 = pos_[edge[0]]\n    x1, y1 = pos_[edge[1]]\n    edge_x.append(x0)\n    edge_x.append(x1)\n    edge_x.append(None)\n    edge_y.append(y0)\n    edge_y.append(y1)\n    edge_y.append(None)\n\n    text = 'source: '+ str(edge[0]) + \" destination: \" + str(edge[1]) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.edges[edge]['properties'].items() if value is not None)\n    mnode_x.extend([(x0 + x1)/2]) # assuming values positive/get midpoint\n    mnode_y.extend([(y0 + y1)/2]) # assumes positive vals/get midpoint\n    mnode_txt.append(text) # hovertext\n\nedge_trace = go.Scatter(\n    x=edge_x, y=edge_y,\n    line=dict(width=0.5, color='#888'),\n    hoverinfo='none',\n    mode='lines')\n\nmnode_trace = go.Scatter(\n    x = mnode_x, y = mnode_y, \n    mode = \"markers\", \n    hoverinfo='text',\n    opacity=0.5,\n    marker=dict(\n        color='LightSkyBlue',\n        size=2,\n        line_width=1))\n\nmnode_trace.text = mnode_txt\n\nnode_x = []\nnode_y = []\nfor node in G.nodes():\n    x, y = pos_[node]\n    node_x.append(x)\n    node_y.append(y)\n\nnode_adjacencies = []\nnode_text = []\nnode_sizes = []\nfor node, adjacencies in enumerate(G.adjacency()):\n    node_sizes.append(10 + len(adjacencies[1])/G.number_of_nodes())\n    node_adjacencies.append(len(adjacencies[1]))\n    text = '# of connections: '+ str(len(adjacencies[1])) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.nodes[adjacencies[0]]['properties'].items() if value is not None)\n    node_text.append(text)\n\nnode_trace = go.Scatter(\n    x=node_x, y=node_y,\n    mode='markers',\n    hoverinfo='text',\n    marker=dict(\n        showscale=True,\n        # colorscale options\n        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |\n        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |\n        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |\n        colorscale='Picnic',\n        reversescale=False,\n        color=[],\n        size=10,\n        colorbar=dict(\n            thickness=15,\n            title='Node Connections',\n            xanchor='left',\n            titleside='right'\n        ),\n        line_width=2))\n\nnode_trace.marker.color = node_adjacencies\nnode_trace.text = node_text\nnode_trace.marker.size = node_sizes\n\nfig = go.Figure(data=[edge_trace, node_trace, mnode_trace],\n             layout=go.Layout(\n                title='<br>Graph visualization of the data',\n                titlefont_size=16,\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"Created used plotly, networkx and the python plugin of Kusto\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\",\n                    x=0.005, y=-0.002 ) ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))\n                )\n\n\nplotly_obj = fig.to_json()\nresult = pd.DataFrame(data = [plotly_obj], columns = ['plotly'])\n```;\nlet pythonCode = replace_string(pythonCodeBlueprint, \"##layout##\", _pLayout);\nlet nodes = datatable(name:string, type:string, age:long) \n[ \n\t\"Alice\", \"Person\", 23,  \n\t\"Bob\", \"Person\", 31,  \n\t\"Eve\", \"Person\", 17,  \n\t\"Mallory\", \"Person\", 29,  \n\t\"Trent\", \"System\", 99 \n]; \nlet edges = datatable(source:string, destination:string, edge_type:string) \n[ \n\t\"Alice\", \"Bob\", \"communicatesWith\",  \n\t\"Alice\", \"Trent\", \"trusts\",  \n\t\"Bob\", \"Trent\", \"hasPermission\",  \n\t\"Eve\", \"Alice\", \"attacks\",  \n\t\"Mallory\", \"Alice\", \"attacks\",  \n\t\"Mallory\", \"Bob\", \"attacks\"  \n]; \nedges\n| make-graph source --> destination with nodes on name\n| graph-to-table edges as E with_source_id=sourceId with_target_id=targetId, nodes as N with_node_id=nodeId;\nunion withsource=tableName E, N\n| evaluate python(\n//\ntypeof(plotly:string),               //  Output schema: append a new fx column to original table \npythonCode)","id":"e217e08c-569c-4674-bb5d-dcd2e83418d7","usedVariables":["_pLayout"]}]}