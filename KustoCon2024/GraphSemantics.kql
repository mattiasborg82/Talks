//Create function
.create-or-alter function with (skipvalidation = "true") CreateGraphTabular(E:(tableName:string,sourceId:long,targetId:long), N:(tableName:string,nodeId:long), pLayout:string) {
    let pythonCodeBlueprint = ```
    import numpy as np
    import pandas as pd
    import plotly.graph_objects as go
    import networkx as nx
    
    G = nx.Graph()
    
    for index, row in df.iterrows():
        if row["tableName"] == "N":
            G.add_node(row["nodeId"], size = 1, properties = row.where(pd.notnull(row), None).to_dict())
        elif row["tableName"] == "E":
            G.add_edge(row["sourceId"], row["targetId"], weight = 1, properties = row.where(pd.notnull(row), None).to_dict())
    
    pos_ = nx.layout.##layout##(G)
    
    edge_x = [];
    edge_y = [];
    mnode_x, mnode_y, mnode_txt = [], [], []
    for edge in G.edges():
        x0, y0 = pos_[edge[0]]
        x1, y1 = pos_[edge[1]]
        edge_x.append(x0)
        edge_x.append(x1)
        edge_x.append(None)
        edge_y.append(y0)
        edge_y.append(y1)
        edge_y.append(None)
    
        text = 'source: '+ str(edge[0]) + " destination: " + str(edge[1]) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.edges[edge]['properties'].items() if value is not None)
        mnode_x.extend([(x0 + x1)/2]) # assuming values positive/get midpoint
        mnode_y.extend([(y0 + y1)/2]) # assumes positive vals/get midpoint
        mnode_txt.append(text) # hovertext
    
    edge_trace = go.Scatter(
        x=edge_x, y=edge_y,
        line=dict(width=0.5, color='#888'),
        hoverinfo='none',
        mode='lines')
    
    mnode_trace = go.Scatter(
        x = mnode_x, y = mnode_y, 
        mode = "markers", 
        hoverinfo='text',
        opacity=0.5,
        marker=dict(
            color='LightSkyBlue',
            size=2,
            line_width=1))
    
    mnode_trace.text = mnode_txt
    
    node_x = []
    node_y = []
    for node in G.nodes():
        x, y = pos_[node]
        node_x.append(x)
        node_y.append(y)
    
    node_adjacencies = []
    node_text = []
    node_sizes = []
    for node, adjacencies in enumerate(G.adjacency()):
        node_sizes.append(10 + len(adjacencies[1])/G.number_of_nodes())
        node_adjacencies.append(len(adjacencies[1]))
        text = '# of connections: '+ str(len(adjacencies[1])) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.nodes[adjacencies[0]]['properties'].items() if value is not None)
        node_text.append(text)
    
    node_trace = go.Scatter(
        x=node_x, y=node_y,
        mode='markers',
        hoverinfo='text',
        marker=dict(
            showscale=True,
            # colorscale options
            #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
            #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
            #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
            colorscale='Bluered',
            reversescale=False,
            color=[],
            size=10,
            colorbar=dict(
                thickness=15,
                title='Node Connections',
                xanchor='left',
                titleside='right'
            ),
            line_width=2))
    
    node_trace.marker.color = node_adjacencies
    node_trace.text = node_text
    node_trace.marker.size = node_sizes
    
    fig = go.Figure(data=[edge_trace, node_trace, mnode_trace],
                 layout=go.Layout(
                    title='<br>Graph visualization of the data',
                    titlefont_size=16,
                    showlegend=False,
                    hovermode='closest',
                    margin=dict(b=20,l=5,r=5,t=40),
                    annotations=[ dict(
                        text="Created used plotly, networkx and the python plugin of Kusto",
                        showarrow=False,
                        xref="paper", yref="paper",
                        x=0.005, y=-0.002 ) ],
                    xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                    yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                    )
    
    
    plotly_obj = fig.to_json()
    result = pd.DataFrame(data = [plotly_obj], columns = ['plotly'])
    ```;
    let pythonCode = replace_string(pythonCodeBlueprint, "##layout##", pLayout);
    union withsource=tableName E, N
    | evaluate python(
    //
    typeof(plotly:string),               //  Output schema: append a new fx column to original table 
    pythonCode)
} 


//######################### Code to use the function ############################
let _pLayout = "spring_layout";
let pythonCodeBlueprint = ```
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import networkx as nx

G = nx.Graph()

for index, row in df.iterrows():
    if row["tableName"] == "N":
        G.add_node(row["nodeId"], size = 1, properties = row.where(pd.notnull(row), None).to_dict())
    elif row["tableName"] == "E":
        G.add_edge(row["sourceId"], row["targetId"], weight = 1, properties = row.where(pd.notnull(row), None).to_dict())

pos_ = nx.layout.##layout##(G)

edge_x = [];
edge_y = [];
mnode_x, mnode_y, mnode_txt = [], [], []
for edge in G.edges():
    x0, y0 = pos_[edge[0]]
    x1, y1 = pos_[edge[1]]
    edge_x.append(x0)
    edge_x.append(x1)
    edge_x.append(None)
    edge_y.append(y0)
    edge_y.append(y1)
    edge_y.append(None)

    text = 'source: '+ str(edge[0]) + " destination: " + str(edge[1]) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.edges[edge]['properties'].items() if value is not None)
    mnode_x.extend([(x0 + x1)/2]) # assuming values positive/get midpoint
    mnode_y.extend([(y0 + y1)/2]) # assumes positive vals/get midpoint
    mnode_txt.append(text) # hovertext

edge_trace = go.Scatter(
    x=edge_x, y=edge_y,
    line=dict(width=0.5, color='#888'),
    hoverinfo='none',
    mode='lines')

mnode_trace = go.Scatter(
    x = mnode_x, y = mnode_y, 
    mode = "markers", 
    hoverinfo='text',
    opacity=0.5,
    marker=dict(
        color='LightSkyBlue',
        size=2,
        line_width=1))

mnode_trace.text = mnode_txt

node_x = []
node_y = []
for node in G.nodes():
    x, y = pos_[node]
    node_x.append(x)
    node_y.append(y)

node_adjacencies = []
node_text = []
node_sizes = []
for node, adjacencies in enumerate(G.adjacency()):
    node_sizes.append(10 + len(adjacencies[1])/G.number_of_nodes())
    node_adjacencies.append(len(adjacencies[1]))
    text = '# of connections: '+ str(len(adjacencies[1])) + '<br>' + 'Properties: ' + '<br>'.join(str(key) + ': ' + str(value) for key, value in G.nodes[adjacencies[0]]['properties'].items() if value is not None)
    node_text.append(text)

node_trace = go.Scatter(
    x=node_x, y=node_y,
    mode='markers',
    hoverinfo='text',
    marker=dict(
        showscale=True,
        # colorscale options
        #'Greys' | 'YlGnBu' | 'Greens' | 'YlOrRd' | 'Bluered' | 'RdBu' |
        #'Reds' | 'Blues' | 'Picnic' | 'Rainbow' | 'Portland' | 'Jet' |
        #'Hot' | 'Blackbody' | 'Earth' | 'Electric' | 'Viridis' |
        colorscale='RdBu',
        reversescale=False,
        color=[],
        size=20,
        colorbar=dict(
            thickness=30,
            title='Node Connections',
            xanchor='left',
            titleside='right'
        ),
        line_width=2))

node_trace.marker.color = node_adjacencies
node_trace.text = node_text
node_trace.marker.size = node_sizes

fig = go.Figure(data=[edge_trace, node_trace, mnode_trace],
             layout=go.Layout(
                title='<br>Graph visualization of the data',
                titlefont_size=16,
                showlegend=False,
                hovermode='closest',
                margin=dict(b=20,l=5,r=5,t=40),
                annotations=[ dict(
                    text="Created used plotly, networkx and the python plugin of Kusto",
                    showarrow=False,
                    xref="paper", yref="paper",
                    x=0.005, y=-0.002 ) ],
                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),
                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False))
                )


plotly_obj = fig.to_json()
result = pd.DataFrame(data = [plotly_obj], columns = ['plotly'])
```;
let pythonCode = replace_string(pythonCodeBlueprint, "##layout##", _pLayout);
let nodes = datatable(name:string, type:string, pid:long) 
[ 
	"Explorer", "Process", 101,  
	"Poweshell", "Process", 210,  
	"Cmd", "Process", 300,  
	"Mimikatz", "Process", 280,  
	"Whoami", "Process", 220,
    "Ipconfig","Process",232,
    "Nslookup","Process",262,
    "Msedge","Process",273,
    "Winword","Process",283,
    "Onenote","Process",433
]; 
let edges = datatable(source:string, destination:string, edge_type:string) 
[ 
    "Explorer","Powerpoint","Childprocess",
	"Explorer", "Powershell", "ChildProcess",  
	"Powershell", "Whoami", "ChildProcess",  
	"Powershell", "Ipconfig", "ChildProcess",  
    "Powershell", "Nslookup", "ChildProcess", 
	"Powershell", "Mimikatz", "ChildProcess",  
	"Mimikatz", "Cmd", "ChildProcess",
    "Explorer","Winword","ChildProcess",
    "Explorer","Msedge","ChildProcess",
    "Explorer","Onenote","ChildProcess"
]; 
edges
| make-graph source --> destination with nodes on name
| graph-to-table edges as E with_source_id=sourceId with_target_id=targetId, nodes as N with_node_id=nodeId;
union withsource=tableName E, N
| evaluate python(
//
typeof(plotly:string),               //  Output schema: append a new fx column to original table 
pythonCode)